{"version":3,"sources":["javascript/reset.js"],"names":["resetBtn","document","getElementById","apiURL","params","URLSearchParams","location","search","userToken","get","lastToastTimestamp","Date","now","show_toast","isSuccess","message","toastAlertMessage","toastImage","toastFrontMessage","toastDescriptionMessage","msgLength","length","style","setProperty","src","backgroundColor","innerText","setTimeout","className","replace","addEventListener","password","value","passwordValidator","passValidator","fetch","method","headers","body","JSON","stringify","status","window","href","regularExpression","boolValue","test"],"mappings":";AAAA,IAAIA,EAAWC,SAASC,eAAe,eACvC,MAAMC,EAAS,+CACf,IAAIC,EAAS,IAAIC,gBAAgBC,SAASC,QAC1C,MAAMC,EAAYJ,EAAOK,IAAI,SAC7B,IAAIC,EAAqBC,KAAKC,MA+B9B,SAASC,EAAWC,EAAWC,GACvBJ,GAAAA,KAAKC,MAAQF,EAAqB,IAAM,CACpCM,IAAAA,EAAoBf,SAASC,eAAe,qBAC5Ce,EAAahB,SAASC,eAAe,cACrCgB,EAAoBjB,SAASC,eAAe,qBAC5CiB,EAA0BlB,SAASC,eACnC,2BAEAkB,EAAYL,EAAQM,OAAS,EAEjCpB,SACKC,eAAe,qBACfoB,MAAMC,YAAY,WAAYH,OAElB,GAAbN,GACAG,EAAWO,IAAM,sCACjBN,EAAkBI,MAAMG,gBAAkB,SACtB,GAAbX,GACPG,EAAWO,IAAM,qCACjBN,EAAkBI,MAAMG,gBAAkB,QAE1CR,EAAWO,IAAM,6CACjBN,EAAkBI,MAAMG,gBAAkB,SAE9CN,EAAwBO,UAAY,IACpCC,WAAW,WACPR,EAAwBO,UAAYX,GACrC,KACHY,WAAW,WACPR,EAAwBO,UAAY,KACrC,MACHV,EAAkBY,UAAY,aAC9BD,WAAW,WACPX,EAAkBY,UAAYZ,EAAkBY,UAAUC,QACtD,aACA,KAEL,KACHnB,EAAqBC,KAAKC,WAE1Be,WAAW,WACPd,EAAWC,EAAWC,IACvB,MAAQJ,KAAKC,MAAQF,IAvEhCV,EAAS8B,iBAAiB,QAAS,UAC3BC,IAAAA,EAAW9B,SAASC,eAAe,kBAAkB8B,MAGrDD,GAAAA,GAFkB9B,SAASC,eAAe,0BAA0B8B,MAG7DnB,OAAAA,EAAW,EAAG,+CAGrBoB,IAAAA,EAAoBC,EAAcH,GAElC,IAACE,EAAkB,GACZpB,OAAAA,EAAW,KAAMoB,EAAkB,MAW5B,YARAE,SAAShC,wBAA8B,CACrDiC,OAAQ,OACRC,QAAS,CACW,eAAA,oBAEpBC,KAAMC,KAAKC,UAAU,CAAET,SAAAA,EAAUvB,UAAAA,OAG7BiC,OACJC,OAAOpC,SAASqC,KAAO,8BAEvB9B,EAAW,EAAG,0CAiDtB,IAAI+B,EAAoB,6CAExB,SAASV,EAAcH,GACfc,IACA9B,EAEAgB,OAAAA,EAASV,OAAS,EAEX,EALK,EAIZN,EAAU,2CAIVgB,EAASV,OAAS,GAEX,EAVK,EASZN,EAAU,4CAIVgB,EAASxB,OAAO,SAAW,EAEpB,EAfK,EAcZQ,EAAU,uDAIVgB,EAASxB,OAAO,SAAW,EAEpB,EApBK,EAmBZQ,EAAU,uDAIVgB,EAASxB,OAAO,SAAW,EAEpB,EAzBK,EAwBZQ,EAAU,6CAIe,GAAzBgB,EAASxB,OAAO,KAET,EA9BK,EA6BZQ,EAAU,2CAIT6B,EAAkBE,KAAKf,GAKrB,EAAC,EAAM,WAHH,EAnCK,EAkCZhB,EAAU","file":"reset.8b43933d.js","sourceRoot":"..\\prod","sourcesContent":["let resetBtn = document.getElementById(\"ResetButton\");\r\nconst apiURL = \"https://whispering-ridge-40670.herokuapp.com\";\r\nlet params = new URLSearchParams(location.search);\r\nconst userToken = params.get('token');\r\nlet lastToastTimestamp = Date.now();\r\n\r\nresetBtn.addEventListener(\"click\", async () => {\r\n    let password = document.getElementById(\"reset_password\").value;\r\n    let confirmPassword = document.getElementById(\"confirm_reset_password\").value;\r\n\r\n    if (password != confirmPassword) {\r\n        return show_toast(2, \"Confirm password not matched with password!\");\r\n    }\r\n\r\n    let passwordValidator = passValidator(password);\r\n\r\n    if (!passwordValidator[0]) {\r\n        return show_toast(2, `${passwordValidator[1]}`);\r\n    }\r\n\r\n    const res = await fetch(`${apiURL}/user/forgotpassword`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ password, userToken }),\r\n    });\r\n\r\n    if (res.status == 200) {\r\n        window.location.href = \"../signupsignin.html#signin\";\r\n    } else {\r\n        show_toast(2, \"Internal server error please re-try!\")\r\n    }\r\n})\r\n\r\nfunction show_toast(isSuccess, message) {\r\n    if (Date.now() - lastToastTimestamp > 5000) {\r\n        let toastAlertMessage = document.getElementById(\"toastAlertMessage\");\r\n        let toastImage = document.getElementById(\"toastImage\");\r\n        let toastFrontMessage = document.getElementById(\"toastFrontMessage\");\r\n        let toastDescriptionMessage = document.getElementById(\r\n            \"toastDescriptionMessage\"\r\n        );\r\n        let msgLength = message.length + 7;\r\n\r\n        document\r\n            .getElementById(\"toastAlertMessage\")\r\n            .style.setProperty(\"--foo\", `${msgLength}ch`);\r\n\r\n        if (isSuccess == 1) {\r\n            toastImage.src = \"../assets/_general/success_tick.svg\";\r\n            toastFrontMessage.style.backgroundColor = \"green\";\r\n        } else if (isSuccess == 0) {\r\n            toastImage.src = \"../assets/_general/error_cross.svg\";\r\n            toastFrontMessage.style.backgroundColor = \"red\";\r\n        } else {\r\n            toastImage.src = \"../assets/_general/neutral_exclamation.svg\";\r\n            toastFrontMessage.style.backgroundColor = \"black\";\r\n        }\r\n        toastDescriptionMessage.innerText = \" \";\r\n        setTimeout(function () {\r\n            toastDescriptionMessage.innerText = message;\r\n        }, 600);\r\n        setTimeout(function () {\r\n            toastDescriptionMessage.innerText = \" \";\r\n        }, 4200);\r\n        toastAlertMessage.className = \"toastPopUp\";\r\n        setTimeout(function () {\r\n            toastAlertMessage.className = toastAlertMessage.className.replace(\r\n                \"toastPopUp\",\r\n                \"\"\r\n            );\r\n        }, 5000);\r\n        lastToastTimestamp = Date.now();\r\n    } else {\r\n        setTimeout(function () {\r\n            show_toast(isSuccess, message);\r\n        }, 5500 - (Date.now() - lastToastTimestamp));\r\n    }\r\n}\r\nlet regularExpression = /^(?=.*[!@#$%-^&*])[a-zA-Z0-9!@#$%^&*]{6,}$/;\r\n\r\nfunction passValidator(password) {\r\n    let boolValue = false;\r\n    let message;\r\n\r\n    if (password.length < 6) {\r\n        message = 'Password should be minimum of 6 length!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (password.length > 20) {\r\n        message = 'Password should be maximum of 20 length!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (password.search(/[A-Z]/) < 0) {\r\n        message = 'Password should contain atleast 1 uppercase letter!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (password.search(/[a-z]/) < 0) {\r\n        message = 'Password should contain atleast 1 lowercase letter!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (password.search(/[0-9]/) < 0) {\r\n        message = 'Password should contain atleast 1 digit!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (password.search(' ') != -1) {\r\n        message = 'Password should not contain any spaces!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    if (!regularExpression.test(password)) {\r\n        message = 'Password should contain atleast 1 special character!';\r\n        return [boolValue, message];\r\n    }\r\n\r\n    return [true, \"Success\"];\r\n\r\n}"]}